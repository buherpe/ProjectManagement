@page "/settings/{id:int}"
@using Microsoft.AspNetCore.DataProtection
@inject IDataProtectionProvider _provider
@inject IConfiguration _configuration

<EditComponent TEntity="Setting" TView="SettingView" TContext="MyContext" Id="Id" @ref="editComponent"
               OnFieldChanged="@FieldChanged">
    <MainTemplate>
        <EditForm EditContext="editComponent.EditContext">
            <DataAnnotationsValidator />

            <div class="input-group mb-3">
                <span class="input-group-text">Наименование</span>
                <InputText @bind-Value="editComponent.Entity.Name" class="form-control" />
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text">Значение</span>
                <InputText @bind-Value="editComponent.Entity.Value" class="form-control" />

                <button @onclick="Encrypt" type="button" class="btn btn-outline-primary"
                        disabled="@editComponent.Entity.Encrypted">
                    @(editComponent.Entity.Encrypted ? "Зашифровано" : "Зашифровать")
                </button>
            </div>

        </EditForm>
    </MainTemplate>
</EditComponent>

@code {
    [Parameter]
    public int Id { get; set; }

    public EditComponent<Setting, SettingView, MyContext> editComponent { get; set; }

    public void Encrypt()
    {
        var protector = _provider.CreateProtector(_configuration["DataProtectionPurpose"]);

        editComponent.Entity.Value = protector.Protect(editComponent.Entity.Value);

        editComponent.Entity.Encrypted = true;

        // todo mark as modified
    }

    public void FieldChanged(FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName != nameof(editComponent.Entity.Value))
        {
            return;
        }

        var valueField = editComponent.EditContext.Field(nameof(editComponent.Entity.Value));

        editComponent.Entity.Encrypted = false;
    }
}
